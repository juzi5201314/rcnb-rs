name: release

on:
  release:
    types: [published]

jobs:
  release-win:
    runs-on: windows-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: build
        run: cargo build --release

      - name: Upload wasm
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/release/${{ env.REPOSITORY_NAME }}.exe
          asset_name: x86_64-windows-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}.exe
          asset_content_type: application/octet-stream

  release:
    runs-on: ubuntu-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: install musl-tools
        run: sudo apt-get install -y musl-tools

      - name: install musl target
        run: rustup target add x86_64-unknown-linux-musl

      - name: build musl
        run: cargo build --release --target=x86_64-unknown-linux-musl

      - name: Upload musl
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/x86_64-unknown-linux-musl/release/${{ env.REPOSITORY_NAME }}
          asset_name: x86_64-linux-musl-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}
          asset_content_type: application/octet-stream

      - name: install wasi target
        run: rustup target add wasm32-wasi

      - name: build wasm
        run: cargo build --release --target=wasm32-wasi

      - name: install wasm-gc
        run: cargo install --force wasm-gc

      - name: run wasm-gc
        run: wasm-gc ./target/wasm32-wasi/release/${{ env.REPOSITORY_NAME }}.wasm

      - name: Upload wasm
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/wasm32-wasi/release/${{ env.REPOSITORY_NAME }}.wasm
          asset_name: wasm32-wasi-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}.wasm
          asset_content_type: application/octet-stream

  release-aarch64-unknown-linux-gnu:
    runs-on: ubuntu-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: sudo systemctl start docker

      - name: install cross
        run: cargo install --force cross

      # Cross compile aarch64-unknown-linux-gnu
      - name: build aarch64-unknown-linux-gnu
        run: cross build --release --target=aarch64-unknown-linux-gnu

      - name: Upload aarch64-unknown-linux-gnu
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/aarch64-unknown-linux-gnu/release/${{ env.REPOSITORY_NAME }}
          asset_name: aarch64-unknown-linux-gnu-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}
          asset_content_type: application/octet-stream




  release-aarch64-unknown-linux-musl:
    runs-on: ubuntu-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: sudo systemctl start docker

      - name: install cross
        run: cargo install --force cross

      # Cross compile aarch64-unknown-linux-musl
      - name: build aarch64-unknown-linux-musl
        run: cross build --release --target=aarch64-unknown-linux-musl

      - name: Upload aarch64-unknown-linux-musl
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/aarch64-unknown-linux-musl/release/${{ env.REPOSITORY_NAME }}
          asset_name: aarch64-unknown-linux-musl-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}
          asset_content_type: application/octet-stream




  release-arm-unknown-linux-musleabi:
    runs-on: ubuntu-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: sudo systemctl start docker

      - name: install cross
        run: cargo install --force cross

      # Cross compile arm-unknown-linux-musleabi
      - name: build arm-unknown-linux-musleabi
        run: cross build --release --target=arm-unknown-linux-musleabi

      - name: Upload arm-unknown-linux-musleabi
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/arm-unknown-linux-musleabi/release/${{ env.REPOSITORY_NAME }}
          asset_name: arm-unknown-linux-musleabi-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}
          asset_content_type: application/octet-stream




  release-arm-unknown-linux-musleabihf:
    runs-on: ubuntu-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: sudo systemctl start docker

      - name: install cross
        run: cargo install --force cross

      # Cross compile arm-unknown-linux-musleabihf
      - name: build arm-unknown-linux-musleabihf
        run: cross build --release --target=arm-unknown-linux-musleabihf

      - name: Upload arm-unknown-linux-musleabihf
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/arm-unknown-linux-musleabihf/release/${{ env.REPOSITORY_NAME }}
          asset_name: arm-unknown-linux-musleabihf-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}
          asset_content_type: application/octet-stream




  release-armv5te-unknown-linux-musleabi:
    runs-on: ubuntu-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: sudo systemctl start docker

      - name: install cross
        run: cargo install --force cross

      # Cross compile armv5te-unknown-linux-musleabi
      - name: build armv5te-unknown-linux-musleabi
        run: cross build --release --target=armv5te-unknown-linux-musleabi

      - name: Upload armv5te-unknown-linux-musleabi
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/armv5te-unknown-linux-musleabi/release/${{ env.REPOSITORY_NAME }}
          asset_name: armv5te-unknown-linux-musleabi-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}
          asset_content_type: application/octet-stream




  release-armv7-unknown-linux-musleabihf:
    runs-on: ubuntu-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: sudo systemctl start docker

      - name: install cross
        run: cargo install --force cross

      # Cross compile armv7-unknown-linux-musleabihf
      - name: build armv7-unknown-linux-musleabihf
        run: cross build --release --target=armv7-unknown-linux-musleabihf

      - name: Upload armv7-unknown-linux-musleabihf
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/armv7-unknown-linux-musleabihf/release/${{ env.REPOSITORY_NAME }}
          asset_name: armv7-unknown-linux-musleabihf-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}
          asset_content_type: application/octet-stream




  release-i586-unknown-linux-musl:
    runs-on: ubuntu-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: sudo systemctl start docker

      - name: install cross
        run: cargo install --force cross

      # Cross compile i586-unknown-linux-musl
      - name: build i586-unknown-linux-musl
        run: cross build --release --target=i586-unknown-linux-musl

      - name: Upload i586-unknown-linux-musl
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/i586-unknown-linux-musl/release/${{ env.REPOSITORY_NAME }}
          asset_name: i586-unknown-linux-musl-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}
          asset_content_type: application/octet-stream




  release-i686-unknown-linux-musl:
    runs-on: ubuntu-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: sudo systemctl start docker

      - name: install cross
        run: cargo install --force cross

      # Cross compile i686-unknown-linux-musl
      - name: build i686-unknown-linux-musl
        run: cross build --release --target=i686-unknown-linux-musl

      - name: Upload i686-unknown-linux-musl
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/i686-unknown-linux-musl/release/${{ env.REPOSITORY_NAME }}
          asset_name: i686-unknown-linux-musl-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}
          asset_content_type: application/octet-stream




  release-mips-unknown-linux-musl:
    runs-on: ubuntu-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: sudo systemctl start docker

      - name: install cross
        run: cargo install --force cross

      # Cross compile mips-unknown-linux-musl
      - name: build mips-unknown-linux-musl
        run: cross build --release --target=mips-unknown-linux-musl

      - name: Upload mips-unknown-linux-musl
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/mips-unknown-linux-musl/release/${{ env.REPOSITORY_NAME }}
          asset_name: mips-unknown-linux-musl-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}
          asset_content_type: application/octet-stream




  release-mipsel-unknown-linux-musl:
    runs-on: ubuntu-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: sudo systemctl start docker

      - name: install cross
        run: cargo install --force cross

      # Cross compile mipsel-unknown-linux-musl
      - name: build mipsel-unknown-linux-musl
        run: cross build --release --target=mipsel-unknown-linux-musl

      - name: Upload mipsel-unknown-linux-musl
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/mipsel-unknown-linux-musl/release/${{ env.REPOSITORY_NAME }}
          asset_name: mipsel-unknown-linux-musl-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}
          asset_content_type: application/octet-stream




  release-powerpc-unknown-linux-gnu:
    runs-on: ubuntu-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: sudo systemctl start docker

      - name: install cross
        run: cargo install --force cross

      # Cross compile powerpc-unknown-linux-gnu
      - name: build powerpc-unknown-linux-gnu
        run: cross build --release --target=powerpc-unknown-linux-gnu

      - name: Upload powerpc-unknown-linux-gnu
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/powerpc-unknown-linux-gnu/release/${{ env.REPOSITORY_NAME }}
          asset_name: powerpc-unknown-linux-gnu-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}
          asset_content_type: application/octet-stream




  release-riscv64gc-unknown-linux-gnu:
    runs-on: ubuntu-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: sudo systemctl start docker

      - name: install cross
        run: cargo install --force cross

      # Cross compile riscv64gc-unknown-linux-gnu
      - name: build riscv64gc-unknown-linux-gnu
        run: cross build --release --target=riscv64gc-unknown-linux-gnu

      - name: Upload riscv64gc-unknown-linux-gnu
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/riscv64gc-unknown-linux-gnu/release/${{ env.REPOSITORY_NAME }}
          asset_name: riscv64gc-unknown-linux-gnu-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}
          asset_content_type: application/octet-stream




  release-s390x-unknown-linux-gnu:
    runs-on: ubuntu-latest
    steps:
      - run: echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash

      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: nightly

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: sudo systemctl start docker

      - name: install cross
        run: cargo install --force cross

      # Cross compile s390x-unknown-linux-gnu
      - name: build s390x-unknown-linux-gnu
        run: cross build --release --target=s390x-unknown-linux-gnu

      - name: Upload s390x-unknown-linux-gnu
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/s390x-unknown-linux-gnu/release/${{ env.REPOSITORY_NAME }}
          asset_name: s390x-unknown-linux-gnu-${{ steps.get_release.outputs.tag_name }}-${{ env.REPOSITORY_NAME }}
          asset_content_type: application/octet-stream